/**********************jibancanyang**************************
 *Author        :jibancanyang
 *Created Time  : ä¸€  5/ 2 03:56:59 2016
 *File Name     : jy.cpp
 *Problem:
 *Get:
***********************1599664856@qq.com**********************/

#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <stack>
using namespace std;
typedef pair<int, int> pii;
typedef long long ull;
typedef unsigned long long ll;
vector<int> vi;
#define pr(x) cout << #x << ": " << x << "  " 
#define pl(x) cout << #x << ": " << x << endl;
#define xx first
#define yy second
#define sa(n) scanf("%d", &(n))
#define sal(n) scanf("%lld", &(n))
#define sai(n) scanf("%I64d", &(n))
#define rep(i, a, n) for (int i = a; i < n; i++)
#define vep(c) for(decltype((c).begin() ) it = (c).begin(); it != (c).end(); it++) 
const int mod = int(1e9) + 7, INF = 0x3fffffff, maxn = 1e5 + 12;
vector<ll> v;

void dfs(ll cur, int pos) {
    if (pos == -1) return;
    v.push_back(cur);
    dfs(cur * 10, pos - 1);
    dfs(cur * 10 + 1, pos - 1);
}

string ans[] = {
"1"
,"10"
,"111"
,"100"
,"10"
,"1110"
,"1001"
,"1000"
,"111111111"
,"10"
,"11"
,"11100"
,"1001"
,"10010"
,"1110"
,"10000"
,"11101"
,"1111111110"
,"11001"
,"100"
,"10101"
,"110"
,"110101"
,"111000"
,"100"
,"10010"
,"1101111111"
,"100100"
,"1101101"
,"1110"
,"111011"
,"100000"
,"111111"
,"111010"
,"10010"
,"11111111100"
,"111"
,"110010"
,"10101"
,"1000"
,"11111"
,"101010"
,"1101101"
,"1100"
,"1111111110"
,"1101010"
,"10011"
,"1110000"
,"1100001"
,"100"
,"100011"
,"100100"
,"100011"
,"11011111110"
,"110"
,"1001000"
,"11001"
,"11011010"
,"11011111"
,"11100"
,"100101"
,"1110110"
,"1111011111"
,"1000000"
,"10010"
,"1111110"
,"1101011"
,"1110100"
,"10000101"
,"10010"
,"10011"
,"111111111000"
,"10001"
,"1110"
,"11100"
,"1100100"
,"1001"
,"101010"
,"10010011"
,"10000"
,"1111111101"
,"111110"
,"101011"
,"1010100"
,"111010"
,"11011010"
,"11010111"
,"11000"
,"11010101"
,"1111111110"
,"1001"
,"11010100"
,"10000011"
,"100110"
,"110010"
,"11100000"
,"11100001"
,"11000010"
,"111111111111111111"
,"100"
,"101"
,"1000110"
,"11100001"
,"1001000"
,"101010"
,"1000110"
,"100010011"
,"110111111100"
,"1001010111"
,"110"
,"111"
,"10010000"
,"1011011"
,"110010"
,"1101010"
,"110110100"
,"10101111111"
,"110111110"
,"100111011"
,"111000"
,"11011"
,"1001010"
,"10001100111"
,"11101100"
,"1000"
,"11110111110"
,"11010011"
,"10000000"
,"100100001"
,"10010"
,"101001"
,"11111100"
,"11101111"
,"11010110"
,"11011111110"
,"11101000"
,"10001"
,"100001010"
,"110110101"
,"100100"
,"10011"
,"100110"
,"1001"
,"1111111110000"
,"11011010"
,"100010"
,"1100001"
,"11100"
,"110111"
,"11100"
,"1110001"
,"11001000"
,"10111110111"
,"10010"
,"1110110"
,"1010100"
,"10101101011"
,"100100110"
,"100011"
,"100000"
,"11101111"
,"11111111010"
,"1010111"
,"1111100"
,"1111110"
,"1010110"
,"11111011"
,"10101000"
,"10111101"
,"111010"
,"1111011111"
,"110110100"
,"1011001101"
,"110101110"
,"100100"
,"110000"
,"100101111"
,"110101010"
,"11010111"
,"11111111100"
,"1001111"
,"10010"
,"100101"
,"110101000"
,"1110"
,"100000110"
,"1001011"
,"1001100"
,"1010111010111"
,"110010"
,"11101111"
,"111000000"
,"11001"
,"111000010"
,"101010"
,"110000100"
,"1101000101"
,"1111111111111111110"
,"111000011"
,"1000"
,"10010001"
,"1010"
,"11010111"
,"10001100"
,"111110"
,"111000010"
,"11011111011"
,"10010000"
,"100111"
,"101010"
,"110100011"
,"10001100"
,"10011"
,"1000100110"
,"11011010"
,"1101111111000"
,"10000011"
,"10010101110"
,"1110111"
,"1100"
,"100111011"
,"1110"
,"1001111001"
,"100100000"
,"11111111100"
,"10110110"
,"11001101"
,"1100100"
,"10000100011"
,"1101010"
,"111111"
,"1101101000"
,"111110011"
,"101011111110"
,"100110"
,"1101111100"
,"101010111"
,"1001110110"
,"1111111"
,"1110000"
,"111101"
,"110110"
,"100111110111"
,"10010100"
,"11000010"
,"100011001110"
,"1000000001"
,"111011000"
,"1111100001"
,"1000"
,"110001001"
,"111101111100"
,"11111001"
,"110100110"
,"1000110"
,"100000000"
,"101001"
,"1001000010"
,"10101"
,"100100"
,"10111101111"
,"1010010"
,"10001101"
,"111111000"
,"1000110"
,"111011110"
,"1011111111"
,"110101100"
,"100100011"
,"11011111110"
,"11111"
,"111010000"
,"10101"
,"100010"
,"1100"
,"1000010100"
,"110111101"
,"1101101010"
,"11111010111"
,"1001000"
,"101000111"
,"100110"
,"10010111011"
,"1001100"
,"110010"
,"10010"
,"1011101"
,"11111111100000"
,"1100110001"
,"11011010"
,"100110111"
,"1000100"
,"110000111"
,"11000010"
,"110111110"
,"111000"
,"1111011111111111111"
,"1101110"
,"10010101101"
,"11100"
,"1101001111"
,"11100010"
,"1011111"
,"110010000"
,"1001010"
,"101111101110"
,"10001100011"
,"100100"
,"1110110001"
,"1110110"
,"101010001"
,"10101000"
,"11001011"
,"101011010110"
,"11110111110"
,"1001001100"
,"1000000111111"
,"1000110"
,"111101001"
,"1000000"
,"110100111"
,"111011110"
,"11010101"
,"111111110100"
,"100100"
,"10101110"
,"1001010111"
,"11111000"
,"11110001"
,"1111110"
,"111011111"
,"10101100"
,"111111111"
,"111110110"
,"11010110"
,"101010000"
,"1011"
,"101111010"
,"1010101011"
,"1110100"
,"11001001"
,"11110111110"
,"1100001"
,"1101101000"
,"100001010"
,"10110011010"
,"1010111101"
,"1101011100"
,"1100100001"
,"100100"
,"1011001011111"
,"1100000"
,"10101101001"
,"1001011110"
,"100110"
,"1101010100"
,"100111011"
,"110101110"
,"1001010111"
,"111111111000"
,"11101111"
,"10011110"
,"1000111101"
,"100100"
,"100010"
,"1001010"
,"1101"
,"1101010000"
,"111001111011"
,"1110"
,"100111011"
,"1000001100"
,"101011011"
,"10010110"
,"111000"
,"10011000"
,"11100011"
,"10101110101110"
,"100101101"
,"1100100"
,"101011101"
,"111011110"
,"11010101"
,"1110000000"
,"10010"
,"110010"
,"11111011101"
,"1110000100"
,"1011011"
,"101010"
,"110111000101"
,"1100001000"
,"101001"
,"11010001010"
,"100100110"
,"11111111111111111100"
,"11010001"
,"1110000110"
,"1111011111"
,"10000"
,"1111011001"
,"100100010"
,"111001111"
,"10100"
,"11111111010"
,"110101110"
,"111111"
,"100011000"
,"1100001001"
,"111110"
,"1110111"
,"1110000100"
,"11101100101"
,"110111110110"
,"1010110"
,"100100000"
,"110110101"
,"1001110"
,"10001111"
,"1010100"
,"100110011"
,"1101000110"
,"100111011111"
,"100011000"
,"1110100"
,"100110"
,"1010010001"
,"10001001100"
,"111111"
,"11011010"
,"101100101"
,"11011111110000"
,"10001001"
,"100000110"
,"110101110"
,"100101011100"
,"11101111"
,"11101110"
,"10001100011"
,"11000"
,"11111110101"
,"1001110110"
,"110000001"
,"11100"
,"110101010"
,"10011110010"
,"10000111011"
,"1001000000"
,"111100111"
,"11111111100"
,"1111111111"
,"101101100"
,"10001011011"
,"110011010"
,"10010"
,"11001000"
,"1001101001"
,"100001000110"
,"111101101011"
,"11010100"
,"111101"
,"1111110"
,"110100011"
,"11011010000"
,"100000110"
,"1111100110"
    
};

int main(void)
{
#ifdef LOCAL
    //freopen("/Users/zhaoyang/in.txt", "r", stdin);
   //freopen("/Users/zhaoyang/out.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
    /*dfs(1, 19);
    sort(v.begin(), v.end());
    for (ll i = 1; i <= 466; i++) {
        bool ok = false;
        rep (j, 0, (int)v.size()) {
            if (v[j] % i == 0) {ok = true; 
                cout <<  ",\"" << v[j] << "\""<< endl;
              // ta.push_back(v[j]);
               
                break;}
        }
        if (!ok) break;
    }
    */int T;
    cin >> T;
    while (T--) {
        int tem;
        cin >> tem;
        cout << ans[tem - 1] << endl;

    }
    return 0;
}
